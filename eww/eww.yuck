(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  (bar))

(defwidget bar []
  (box :orientation "h"
    (left-widgets)
    (center-widgets)
    (right-widgets)))

(defwidget left-widgets []
  (box :class "left-widgets"
       :halign "start"
    (workspaces)))

(defwidget center-widgets []
  (box :class "center-widgets"
    (active-window-title)))

(defwidget right-widgets []
  (box :class "right-widgets"
       :halign "end"
    (keyboard-layout)
    (battery)
    (date)
    (time)))


(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :spacing 6
    (button :onclick "hyprctl dispatch workspace 1" 1)
    (button :onclick "hyprctl dispatch workspace 2" 2)
    (button :onclick "hyprctl dispatch workspace 3" 3)
    (button :onclick "hyprctl dispatch workspace 4" 4)
    (button :onclick "hyprctl dispatch workspace 5" 5)
    (button :onclick "hyprctl dispatch workspace 6" 6)
    (button :onclick "hyprctl dispatch workspace 7" 7)
    (button :onclick "hyprctl dispatch workspace 8" 8)
    (button :onclick "hyprctl dispatch workspace 9" 9)
    (button :onclick "hyprctl dispatch workspace 10" 0)))


(defwidget active-window-title []
  (box :class "active-window-title"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {active-window-title}))

(defpoll active-window-title :interval "0.4s"
  "bink-getactivewindowtitle")


(defwidget keyboard-layout []
  (box :class "active-window-title"
    {keyboard-layout}))

(defpoll keyboard-layout :interval "0.4s"
  "cat ~/.local/vars/xkb-layout")


(defwidget battery []
  (box :class "battery"
    {battery}))

(defpoll battery :interval "0.4s"
  "echo $(cat /sys/class/power_supply/BAT1/capacity)%")


(defwidget date []
  (box :class "date"
    {date}))

(defpoll date :interval "0.4s"
  "bink-getdate")


(defwidget time []
  (box :class "time"
    {time}))

(defpoll time :interval "0.4s"
  "bink-gettime")
