#!/usr/bin/env python3

import json
import os
import subprocess
import sys
import time
import tomllib


def execute(command: str) -> None:
    arguments = command.split()

    subprocess.run(("hyprctl", "keyword", "exec", command), stdout=subprocess.DEVNULL)


def get_command_output(command: str) -> str:
    arguments = command.split()
    process = subprocess.run(arguments, capture_output=True, text=True)

    result: str = process.stdout

    return result


def check_scratchpad(name: str, scratchpad: dict) -> bool:
    clients = get_command_output("hyprctl -j clients")
    clients = json.loads(clients)

    for c in clients:
        if c["initialClass"] != scratchpad["window_class"]:
            continue
        if c["workspace"]["name"] != f"special:{name}":
            continue

        return True

    return False


def launch_scratchpad(name: str, scratchpad: dict, toggle: bool = False) -> None:
    window_class = "^({})$".format(scratchpad["window_class"])

    set_window_rule(f"workspace special:{name}", window_class)
    for rule in scratchpad["window_rules"]:
        set_window_rule(rule, window_class)

    execute(scratchpad["command"])
    time.sleep(scratchpad["launch_delay"])
    set_window_rule("unset", window_class)

    if toggle:
        toggle_scratchpad(name)


def toggle_scratchpad(name: str):
    execute(f"hyprctl dispatch togglespecialworkspace {name}")


def set_window_rule(rule: str, window_class: str) -> None:
    arguments = (
        "hyprctl",
        "keyword",
        "windowrule",
        f"{rule}, {window_class}",
    )

    subprocess.run(arguments, stdout=subprocess.DEVNULL)


if __name__ == "__main__":
    argument = sys.argv[1]

    sw_file = os.path.dirname(os.path.dirname(__file__))
    sw_file = os.path.join(sw_file, "special-workspaces.toml")

    with open(sw_file, "rb") as sw_file:
        special_workspaces = tomllib.load(sw_file)

    if argument in ("-a", "--all"):
        for name, scratchpad in special_workspaces.items():
            if scratchpad["lazy"]:
                continue
            if check_scratchpad(name, scratchpad):
                continue

            launch_scratchpad(name, scratchpad, toggle=False)

        SUCCESS_CODE = 0
        sys.exit(SUCCESS_CODE)

    name = argument
    scratchpad = special_workspaces[name]

    if not check_scratchpad(name, scratchpad):
        launch_scratchpad(name, scratchpad, toggle=True)
    else:
        toggle_scratchpad(name)
