(defvar previous-workspace "")
(defvar keyboard-layout-value "En")


(defwindow bar
  :monitor 0
  :stacking "fg"
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "100%"
                      :height "32px"
                      :anchor "top center")
  (bar))

(defwidget bar []
  (box :orientation "h"
    (left-widgets)
    (center-widgets)
    (right-widgets)))

(defwidget left-widgets []
  (box :class "left-widgets"
       :halign "start"
       :space-evenly false
       :spacing 6
    (spacer)
    (hypr-workspaces)))

(defwidget center-widgets []
  (box :class "center-widgets"
    (active-window-title)))

(defwidget right-widgets []
  (box :class "right-widgets"
       :halign "end"
       :orientation "h"
       :space-evenly false
       :spacing 12
    (keyboard-layout)
    (battery)
    (date)
    (time)
    (spacer)))

(defwidget spacer [] (box))


(deflisten workspaces :initial "[]"
  "~/.config/eww/bin/workspaces")


(deflisten current_workspace :initial "1"
  "~/.config/eww/bin/active-workspace")


(defwidget hypr-workspaces []
  (eventbox :onscroll
    "bash ~/.config/eww/bin/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :space-evenly true
         :spacing 2
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
                  :width 20
          (box :class
            "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"} ${workspace.id == previous-workspace ? "previous" : ""}" (label :text "${workspace.id % 10}")))))))

(defwidget active-window-title []
  (box :class "active-window-title"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {active-window-title}))

(deflisten active-window-title
  "~/.config/eww/bin/active-window-title")


(defwidget keyboard-layout []
  (box :class "keyboard-layout"
    {keyboard-layout}))

(deflisten keyboard-layout
  "~/.config/eww/bin/keyboard-layout")

(defwidget battery []
  (box :class "battery"
    "${EWW_BATTERY.BAT0.capacity}%"))


(defwidget date []
  (box :class "date"
    (label :text {formattime(EWW_TIME, "%a %b %-d")})))


(defwidget time []
  (box :class "time"
    (label :text {formattime(EWW_TIME, "%-I:%M %p")})))

